// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrainerClient is the client API for Trainer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrainerClient interface {
	Train(ctx context.Context, in *TrainRequest, opts ...grpc.CallOption) (*TrainReply, error)
}

type trainerClient struct {
	cc grpc.ClientConnInterface
}

func NewTrainerClient(cc grpc.ClientConnInterface) TrainerClient {
	return &trainerClient{cc}
}

func (c *trainerClient) Train(ctx context.Context, in *TrainRequest, opts ...grpc.CallOption) (*TrainReply, error) {
	out := new(TrainReply)
	err := c.cc.Invoke(ctx, "/stacking.Trainer/Train", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainerServer is the server API for Trainer service.
// All implementations must embed UnimplementedTrainerServer
// for forward compatibility
type TrainerServer interface {
	Train(context.Context, *TrainRequest) (*TrainReply, error)
	mustEmbedUnimplementedTrainerServer()
}

// UnimplementedTrainerServer must be embedded to have forward compatible implementations.
type UnimplementedTrainerServer struct {
}

func (UnimplementedTrainerServer) Train(context.Context, *TrainRequest) (*TrainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Train not implemented")
}
func (UnimplementedTrainerServer) mustEmbedUnimplementedTrainerServer() {}

// UnsafeTrainerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrainerServer will
// result in compilation errors.
type UnsafeTrainerServer interface {
	mustEmbedUnimplementedTrainerServer()
}

func RegisterTrainerServer(s grpc.ServiceRegistrar, srv TrainerServer) {
	s.RegisterService(&Trainer_ServiceDesc, srv)
}

func _Trainer_Train_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainerServer).Train(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stacking.Trainer/Train",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainerServer).Train(ctx, req.(*TrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Trainer_ServiceDesc is the grpc.ServiceDesc for Trainer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Trainer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stacking.Trainer",
	HandlerType: (*TrainerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Train",
			Handler:    _Trainer_Train_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/stacking.proto",
}

// ReducerClient is the client API for Reducer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReducerClient interface {
	Reduce(ctx context.Context, in *ReduceRequest, opts ...grpc.CallOption) (*ReduceReply, error)
}

type reducerClient struct {
	cc grpc.ClientConnInterface
}

func NewReducerClient(cc grpc.ClientConnInterface) ReducerClient {
	return &reducerClient{cc}
}

func (c *reducerClient) Reduce(ctx context.Context, in *ReduceRequest, opts ...grpc.CallOption) (*ReduceReply, error) {
	out := new(ReduceReply)
	err := c.cc.Invoke(ctx, "/stacking.Reducer/Reduce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReducerServer is the server API for Reducer service.
// All implementations must embed UnimplementedReducerServer
// for forward compatibility
type ReducerServer interface {
	Reduce(context.Context, *ReduceRequest) (*ReduceReply, error)
	mustEmbedUnimplementedReducerServer()
}

// UnimplementedReducerServer must be embedded to have forward compatible implementations.
type UnimplementedReducerServer struct {
}

func (UnimplementedReducerServer) Reduce(context.Context, *ReduceRequest) (*ReduceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reduce not implemented")
}
func (UnimplementedReducerServer) mustEmbedUnimplementedReducerServer() {}

// UnsafeReducerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReducerServer will
// result in compilation errors.
type UnsafeReducerServer interface {
	mustEmbedUnimplementedReducerServer()
}

func RegisterReducerServer(s grpc.ServiceRegistrar, srv ReducerServer) {
	s.RegisterService(&Reducer_ServiceDesc, srv)
}

func _Reducer_Reduce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReduceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReducerServer).Reduce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stacking.Reducer/Reduce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReducerServer).Reduce(ctx, req.(*ReduceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Reducer_ServiceDesc is the grpc.ServiceDesc for Reducer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Reducer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stacking.Reducer",
	HandlerType: (*ReducerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Reduce",
			Handler:    _Reducer_Reduce_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/stacking.proto",
}

// MetatrainerClient is the client API for Metatrainer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetatrainerClient interface {
	Metatrain(ctx context.Context, in *MetaTrainRequest, opts ...grpc.CallOption) (*MetaTrainReply, error)
}

type metatrainerClient struct {
	cc grpc.ClientConnInterface
}

func NewMetatrainerClient(cc grpc.ClientConnInterface) MetatrainerClient {
	return &metatrainerClient{cc}
}

func (c *metatrainerClient) Metatrain(ctx context.Context, in *MetaTrainRequest, opts ...grpc.CallOption) (*MetaTrainReply, error) {
	out := new(MetaTrainReply)
	err := c.cc.Invoke(ctx, "/stacking.Metatrainer/Metatrain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetatrainerServer is the server API for Metatrainer service.
// All implementations must embed UnimplementedMetatrainerServer
// for forward compatibility
type MetatrainerServer interface {
	Metatrain(context.Context, *MetaTrainRequest) (*MetaTrainReply, error)
	mustEmbedUnimplementedMetatrainerServer()
}

// UnimplementedMetatrainerServer must be embedded to have forward compatible implementations.
type UnimplementedMetatrainerServer struct {
}

func (UnimplementedMetatrainerServer) Metatrain(context.Context, *MetaTrainRequest) (*MetaTrainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Metatrain not implemented")
}
func (UnimplementedMetatrainerServer) mustEmbedUnimplementedMetatrainerServer() {}

// UnsafeMetatrainerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetatrainerServer will
// result in compilation errors.
type UnsafeMetatrainerServer interface {
	mustEmbedUnimplementedMetatrainerServer()
}

func RegisterMetatrainerServer(s grpc.ServiceRegistrar, srv MetatrainerServer) {
	s.RegisterService(&Metatrainer_ServiceDesc, srv)
}

func _Metatrainer_Metatrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaTrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetatrainerServer).Metatrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stacking.Metatrainer/Metatrain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetatrainerServer).Metatrain(ctx, req.(*MetaTrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Metatrainer_ServiceDesc is the grpc.ServiceDesc for Metatrainer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Metatrainer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stacking.Metatrainer",
	HandlerType: (*MetatrainerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Metatrain",
			Handler:    _Metatrainer_Metatrain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/stacking.proto",
}
