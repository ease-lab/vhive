name: Function Composition Bench

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Function Composition Push"]
    branches: [main]
    types:
      - completed

env:
  GOOS: linux
  GO111MODULE: on
  TMPDIR: /root/tmp

jobs:
  bench-docker-compose-serving:
    name: Serving uBenchmark (docker-compose)
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - name: start multi-container program with docker-compose
        working-directory: function-images/tests/chained-function-serving
        run: |
          docker-compose up &> log_file &
          sleep 15s
      - name: invoke the chain
        run: |
          ./bin/grpcurl -plaintext localhost:3031 helloworld.Greeter.SayHello
      - name: show docker-compose log
        run: cat function-images/tests/chained-function-serving/log_file

  bench-serving:
    name: Serving uBenchmark (Knative)
    env:
        GITHUB_RUN_ID: ${{ github.run_id }}
        LOGPATH: /tmp/uBench-logs/${{ github.run_id }}
        GOCACHE: /root/tmp/gocache
        GOPATH: /root/tmp/gopath
    runs-on: [stock-knative]
    strategy:
      fail-fast: false
    steps:
      - name: Setup TMPDIR
        run: mkdir -p $TMPDIR

      - name: Set up Golang
        uses: actions/setup-go@v2
        with:
          go-version: 1.16

      - name: Setup LOGPATH
        run: |
          mkdir -p /tmp/uBench-logs/${{ github.run_id }}

      - name: Host Info
        run: |
          echo $HOSTNAME
          echo $GITHUB_RUN_ID
          echo $LOGPATH

      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Start consumer
        run: kn service apply -f ./function-images/tests/chained-function-serving/service-consumer.yaml && sleep 30s

      - name: Start producer
        run: kn service apply -f ./function-images/tests/chained-function-serving/service-producer.yaml && sleep 30s

      # First use grpcurl to invoke and then use the invoker in the same
      # job, since invoker would consider timeouts as an error so if
      # function deployment failed, the CI would not catch an error.
      - name: grpcurl
        run: |
          set -x

          export NODEPORT=$(kubectl get svc kourier-ingress -n kourier-system -o=jsonpath='{.spec.ports[0].nodePort}')
          export HOSTNAME=$(kubectl get ksvc producer -n default -o jsonpath='{.status.url}' | cut -c8-)

          ./bin/grpcurl -d '{\"name\": \"Michal\"}' -plaintext $HOSTNAME:$NODEPORT helloworld.Greeter.SayHello

      - name: Run invoker client
        run: |
          set -x

          export NODEPORT=$(kubectl get svc kourier-ingress -n kourier-system -o=jsonpath='{.spec.ports[0].nodePort}')
          export HOSTNAME=$(kubectl get ksvc producer -n default -o jsonpath='{.status.url}' | cut -c8-)

          echo "[ { \"hostname\": \"$HOSTNAME:$NODEPORT\" } ]" > endpoints.json
          (cd examples/invoker; go build github.com/ease-lab/vhive/examples/invoker)
          ./examples/invoker/invoker -rps 10 -time 5

      - name: Test results
        run: |
          test $(wc -l < rps10.00_lat.csv) -eq 50

      - name: Inspect logs
        run: |
          cat rps*lat.csv

      - name: Archive log artifacts
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: /tmp/uBench-logs/${{ github.run_id }}

      - name: Cleaning
        if: ${{ always() }}
        run: |
          kn service delete -f ./function-images/tests/chained-function-serving/service-producer.yaml --wait
          kn service delete -f ./function-images/tests/chained-function-serving/service-consumer.yaml --wait

  bench-eventing:
    name: Eventing uBenchmark (Knative)
    env:
        GITHUB_RUN_ID: ${{ github.run_id }}
        LOGPATH: /tmp/uBench-logs/${{ github.run_id }}
        GOCACHE: /root/tmp/gocache
        GOPATH: /root/tmp/gopath
    runs-on: [stock-knative]
    strategy:
      fail-fast: false
    steps:
      - name: Setup TMPDIR
        run: mkdir -p $TMPDIR

      - name: Set up Golang
        uses: actions/setup-go@v2
        with:
          go-version: 1.16

      - name: Setup LOGPATH
        run: |
          mkdir -p /tmp/uBench-logs/${{ github.run_id }}

      - name: Host Info
        run: |
          echo $HOSTNAME
          echo $GITHUB_RUN_ID
          echo $LOGPATH

      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Describe
        run: |
          kubectl get -n chained-functions-eventing broker
          kubectl get -n chained-functions-eventing sinkbinding
          kubectl get -n chained-functions-eventing ksvc
          kubectl get -n chained-functions-eventing trigger

      # First use grpcurl to invoke and then use the invoker in the same
      # job, since invoker would consider timeouts as an error so if
      # function deployment failed, the CI would not catch an error.
      - name: grpcurl
        run: |
          set -x

          export NODEPORT=$(kubectl get svc kourier-ingress -n kourier-system -o=jsonpath='{.spec.ports[0].nodePort}')
          export HOSTNAME=$(kubectl get ksvc producer -n chained-functions-eventing -o jsonpath='{.status.url}' | cut -c8-)

          ./bin/grpcurl -d '{\"name\": \"Bora\"}' -plaintext $HOSTNAME:$NODEPORT helloworld.Greeter.SayHello

      - name: Invoke
        run: |
          set -x

          export NODEPORT=$(kubectl get svc kourier-ingress -n kourier-system -o=jsonpath='{.spec.ports[0].nodePort}')
          export HOSTNAME=$(kubectl get ksvc producer -n chained-functions-eventing -o jsonpath='{.status.url}' | cut -c8-)

          echo "[ { \"hostname\": \"$HOSTNAME:$NODEPORT\" } ]" > endpoints.json
          (cd examples/invoker; go build github.com/ease-lab/vhive/examples/invoker)
          ./examples/invoker/invoker -rps 10 -time 5

      - name: Inspect logs
        run: |
          cat rps*lat.csv
          kubectl logs -n chained-functions-eventing -c user-container -l serving.knative.dev/service=producer
          kubectl logs -n chained-functions-eventing -c user-container -l serving.knative.dev/service=consumer

      - name: Test results
        run: |
          test $(wc -l < rps10.00_lat.csv) -eq 50

      - name: Archive log artifacts
        uses: actions/upload-artifact@v2
        with:
          name: logs
          path: /tmp/uBench-logs/${{ github.run_id }}

      - name: Cleaning
        if: ${{ always() }}
        run: ./function-images/tests/chained-function-eventing/manifests/delete.sh
